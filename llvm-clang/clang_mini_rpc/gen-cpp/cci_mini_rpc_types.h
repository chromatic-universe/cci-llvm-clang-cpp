/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef cci_mini_rpc_TYPES_H
#define cci_mini_rpc_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "shared_types.h"




class invalid_clang_op;

typedef struct _invalid_clang_op__isset {
  _invalid_clang_op__isset() : what_op(false), wat(false) {}
  bool what_op :1;
  bool wat :1;
} _invalid_clang_op__isset;

class invalid_clang_op : public ::apache::thrift::TException {
 public:

  invalid_clang_op(const invalid_clang_op&);
  invalid_clang_op& operator=(const invalid_clang_op&);
  invalid_clang_op() : what_op(0), wat() {
  }

  virtual ~invalid_clang_op() throw();
  int32_t what_op;
  std::string wat;

  _invalid_clang_op__isset __isset;

  void __set_what_op(const int32_t val);

  void __set_wat(const std::string& val);

  bool operator == (const invalid_clang_op & rhs) const
  {
    if (!(what_op == rhs.what_op))
      return false;
    if (!(wat == rhs.wat))
      return false;
    return true;
  }
  bool operator != (const invalid_clang_op &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const invalid_clang_op & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const throw();
};

void swap(invalid_clang_op &a, invalid_clang_op &b);

inline std::ostream& operator<<(std::ostream& out, const invalid_clang_op& obj)
{
  obj.printTo(out);
  return out;
}



#endif
