/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "cci_mini_rpc_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




invalid_clang_op::~invalid_clang_op() throw() {
}


void invalid_clang_op::__set_what_op(const int32_t val) {
  this->what_op = val;
}

void invalid_clang_op::__set_wat(const std::string& val) {
  this->wat = val;
}

uint32_t invalid_clang_op::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->what_op);
          this->__isset.what_op = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->wat);
          this->__isset.wat = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t invalid_clang_op::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("invalid_clang_op");

  xfer += oprot->writeFieldBegin("what_op", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->what_op);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("wat", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->wat);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(invalid_clang_op &a, invalid_clang_op &b) {
  using ::std::swap;
  swap(a.what_op, b.what_op);
  swap(a.wat, b.wat);
  swap(a.__isset, b.__isset);
}

invalid_clang_op::invalid_clang_op(const invalid_clang_op& other0) : TException() {
  what_op = other0.what_op;
  wat = other0.wat;
  __isset = other0.__isset;
}
invalid_clang_op& invalid_clang_op::operator=(const invalid_clang_op& other1) {
  what_op = other1.what_op;
  wat = other1.wat;
  __isset = other1.__isset;
  return *this;
}
void invalid_clang_op::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "invalid_clang_op(";
  out << "what_op=" << to_string(what_op);
  out << ", " << "wat=" << to_string(wat);
  out << ")";
}

const char* invalid_clang_op::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: invalid_clang_op";
  }
}


