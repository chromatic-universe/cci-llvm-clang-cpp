/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef cci_mini_clang_rpc_H
#define cci_mini_clang_rpc_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "cci_mini_rpc_types.h"
#include "SharedService.h"



#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class cci_mini_clang_rpcIf : virtual public  ::shared::SharedServiceIf {
 public:
  virtual ~cci_mini_clang_rpcIf() {}
  virtual void perform_diag(std::string& _return, const std::string& index_module) = 0;
};

class cci_mini_clang_rpcIfFactory : virtual public  ::shared::SharedServiceIfFactory {
 public:
  typedef cci_mini_clang_rpcIf Handler;

  virtual ~cci_mini_clang_rpcIfFactory() {}

  virtual cci_mini_clang_rpcIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler( ::shared::SharedServiceIf* /* handler */) = 0;
};

class cci_mini_clang_rpcIfSingletonFactory : virtual public cci_mini_clang_rpcIfFactory {
 public:
  cci_mini_clang_rpcIfSingletonFactory(const boost::shared_ptr<cci_mini_clang_rpcIf>& iface) : iface_(iface) {}
  virtual ~cci_mini_clang_rpcIfSingletonFactory() {}

  virtual cci_mini_clang_rpcIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler( ::shared::SharedServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<cci_mini_clang_rpcIf> iface_;
};

class cci_mini_clang_rpcNull : virtual public cci_mini_clang_rpcIf , virtual public  ::shared::SharedServiceNull {
 public:
  virtual ~cci_mini_clang_rpcNull() {}
  void perform_diag(std::string& /* _return */, const std::string& /* index_module */) {
    return;
  }
};

typedef struct _cci_mini_clang_rpc_perform_diag_args__isset {
  _cci_mini_clang_rpc_perform_diag_args__isset() : index_module(false) {}
  bool index_module :1;
} _cci_mini_clang_rpc_perform_diag_args__isset;

class cci_mini_clang_rpc_perform_diag_args {
 public:

  cci_mini_clang_rpc_perform_diag_args(const cci_mini_clang_rpc_perform_diag_args&);
  cci_mini_clang_rpc_perform_diag_args& operator=(const cci_mini_clang_rpc_perform_diag_args&);
  cci_mini_clang_rpc_perform_diag_args() : index_module() {
  }

  virtual ~cci_mini_clang_rpc_perform_diag_args() throw();
  std::string index_module;

  _cci_mini_clang_rpc_perform_diag_args__isset __isset;

  void __set_index_module(const std::string& val);

  bool operator == (const cci_mini_clang_rpc_perform_diag_args & rhs) const
  {
    if (!(index_module == rhs.index_module))
      return false;
    return true;
  }
  bool operator != (const cci_mini_clang_rpc_perform_diag_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const cci_mini_clang_rpc_perform_diag_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class cci_mini_clang_rpc_perform_diag_pargs {
 public:


  virtual ~cci_mini_clang_rpc_perform_diag_pargs() throw();
  const std::string* index_module;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _cci_mini_clang_rpc_perform_diag_result__isset {
  _cci_mini_clang_rpc_perform_diag_result__isset() : success(false) {}
  bool success :1;
} _cci_mini_clang_rpc_perform_diag_result__isset;

class cci_mini_clang_rpc_perform_diag_result {
 public:

  cci_mini_clang_rpc_perform_diag_result(const cci_mini_clang_rpc_perform_diag_result&);
  cci_mini_clang_rpc_perform_diag_result& operator=(const cci_mini_clang_rpc_perform_diag_result&);
  cci_mini_clang_rpc_perform_diag_result() : success() {
  }

  virtual ~cci_mini_clang_rpc_perform_diag_result() throw();
  std::string success;

  _cci_mini_clang_rpc_perform_diag_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const cci_mini_clang_rpc_perform_diag_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const cci_mini_clang_rpc_perform_diag_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const cci_mini_clang_rpc_perform_diag_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _cci_mini_clang_rpc_perform_diag_presult__isset {
  _cci_mini_clang_rpc_perform_diag_presult__isset() : success(false) {}
  bool success :1;
} _cci_mini_clang_rpc_perform_diag_presult__isset;

class cci_mini_clang_rpc_perform_diag_presult {
 public:


  virtual ~cci_mini_clang_rpc_perform_diag_presult() throw();
  std::string* success;

  _cci_mini_clang_rpc_perform_diag_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class cci_mini_clang_rpcClient : virtual public cci_mini_clang_rpcIf, public  ::shared::SharedServiceClient {
 public:
  cci_mini_clang_rpcClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
     ::shared::SharedServiceClient(prot, prot) {}
  cci_mini_clang_rpcClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :     ::shared::SharedServiceClient(iprot, oprot) {}
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void perform_diag(std::string& _return, const std::string& index_module);
  void send_perform_diag(const std::string& index_module);
  void recv_perform_diag(std::string& _return);
};

class cci_mini_clang_rpcProcessor : public  ::shared::SharedServiceProcessor {
 protected:
  boost::shared_ptr<cci_mini_clang_rpcIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (cci_mini_clang_rpcProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_perform_diag(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  cci_mini_clang_rpcProcessor(boost::shared_ptr<cci_mini_clang_rpcIf> iface) :
     ::shared::SharedServiceProcessor(iface),
    iface_(iface) {
    processMap_["perform_diag"] = &cci_mini_clang_rpcProcessor::process_perform_diag;
  }

  virtual ~cci_mini_clang_rpcProcessor() {}
};

class cci_mini_clang_rpcProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  cci_mini_clang_rpcProcessorFactory(const ::boost::shared_ptr< cci_mini_clang_rpcIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< cci_mini_clang_rpcIfFactory > handlerFactory_;
};

class cci_mini_clang_rpcMultiface : virtual public cci_mini_clang_rpcIf, public  ::shared::SharedServiceMultiface {
 public:
  cci_mini_clang_rpcMultiface(std::vector<boost::shared_ptr<cci_mini_clang_rpcIf> >& ifaces) : ifaces_(ifaces) {
    std::vector<boost::shared_ptr<cci_mini_clang_rpcIf> >::iterator iter;
    for (iter = ifaces.begin(); iter != ifaces.end(); ++iter) {
       ::shared::SharedServiceMultiface::add(*iter);
    }
  }
  virtual ~cci_mini_clang_rpcMultiface() {}
 protected:
  std::vector<boost::shared_ptr<cci_mini_clang_rpcIf> > ifaces_;
  cci_mini_clang_rpcMultiface() {}
  void add(boost::shared_ptr<cci_mini_clang_rpcIf> iface) {
     ::shared::SharedServiceMultiface::add(iface);
    ifaces_.push_back(iface);
  }
 public:
  void perform_diag(std::string& _return, const std::string& index_module) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->perform_diag(_return, index_module);
    }
    ifaces_[i]->perform_diag(_return, index_module);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class cci_mini_clang_rpcConcurrentClient : virtual public cci_mini_clang_rpcIf, public  ::shared::SharedServiceConcurrentClient {
 public:
  cci_mini_clang_rpcConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
     ::shared::SharedServiceConcurrentClient(prot, prot) {}
  cci_mini_clang_rpcConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :     ::shared::SharedServiceConcurrentClient(iprot, oprot) {}
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void perform_diag(std::string& _return, const std::string& index_module);
  int32_t send_perform_diag(const std::string& index_module);
  void recv_perform_diag(std::string& _return, const int32_t seqid);
};

#ifdef _WIN32
  #pragma warning( pop )
#endif



#endif
